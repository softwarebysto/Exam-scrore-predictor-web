@page "/"

@using Newtonsoft.Json;

<PageTitle> Pridict your exam score</PageTitle>

<div class="main-wrapper">
    <div class="centered">
        @if (!_predictionSuccessful)
        {
            <div class="actions-wrapper">
                <input @bind-value="hours" class="input-style-intput" @oninput="InPutChanged" placeholder="Number of hours studied" type="number" maxlength="2" max="24" min="0"/>
                <br/>
                @if (_hourError)
                {
                    <span style="color:red">Number of hours studied must be between 1 and 24</span>                    
                }else{}
                <br/>
                <input @bind-value="courses" class="input-style-intput" @oninput="InPutChangedCourses" placeholder="Number of courses studied" type="number" maxlength="2" max="24" min="0"/>
                <br/>
                @if (_coursesError)
                {
                    <span style="color:red">Number of hours courses must be between 1 and 10</span>                    
                }else{}
                <br/>
                <br/>
                <button class="button-style" @onclick="PredictScore">Predict score</button>
            </div>            
        }
        else
        {
            <div class="actions-wrapper">
                <div class="row score-wrapper ">
                    <span style="color:white; font-size:100px; width: fit-content;"> @prediction </span> <span style="color:white; font-size:35px; width: fit-content;">pts</span>                     
                </div>
                <br/>
                <br/>
                <br/>
                <button class="button-style" @onclick="RePredict">Predict again</button>
            </div>
        }
    </div>
</div>
    
@code{
    public int? hours;
    public bool _hourError;

    public int? courses;
    public double? prediction;
    public bool _coursesError;
    public string url = "https://app.unis.uz/";
    public bool _predictionSuccessful;
    Random rnd = new Random();

    public async void PredictScore()
    {
        _hourError = hours > 0 && hours < 24 ? false : true;
        _coursesError = courses > 0 && courses < 10 ? false : true;
        if (hours>0 && hours<24 && courses>0 && courses<10)
        {
            try
            {

                HttpClient client = new HttpClient();

                client.Timeout = TimeSpan.FromMinutes(1);
                client.BaseAddress = new Uri(url);
                
                HttpResponseMessage httpResponse = await client.GetAsync($"/marks?study_hours={hours}&courses_number={courses}");
                string content = await httpResponse.Content.ReadAsStringAsync();
                var responseStatus = httpResponse.StatusCode;
                if (responseStatus == System.Net.HttpStatusCode.OK)
                {
                    var data = JsonConvert.DeserializeObject<ResponseModal>(content);
                    if (data!=null)
                    {
                        prediction = data.predicted_mark;                    
                    }
                    _predictionSuccessful = true;
                }
                else
                {
                    prediction=rnd.Next(100);                    
                }
            }
            catch (Exception)
            {
                
                throw;
            }
        }
        else
        {
            _predictionSuccessful = false;
        }
    }
    public void RePredict(){
        _predictionSuccessful = false;
    }
    public void InPutChanged() => _hourError = hours > 0 && hours < 24 ? true : false;
    public void InPutChangedCourses() => _coursesError = courses > 0 && courses < 10 ? true : false;

    public class ResponseModal
    {
        public double? predicted_mark { get; set; }
    }

    

}